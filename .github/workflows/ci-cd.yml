name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock httpx
    
    - name: Run code quality checks
      run: |
        # Run black formatter check
        black --check src/ tests/
        
        # Run isort import sorting check
        isort --check-only src/ tests/
        
        # Run flake8 linting
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
        # Run mypy type checking
        mypy src/ --ignore-missing-imports
    
    - name: Run tests
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export MLFLOW_TRACKING_URI="sqlite:///test_mlflow.db"
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name staging-cluster
    
    - name: Deploy to staging
      run: |
        helm upgrade --install churn-prediction-staging ./helm/churn-prediction \
          --namespace mlops-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=latest \
          --set environment=staging \
          --wait --timeout=300s
    
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=churn-prediction -n mlops-staging --timeout=300s
        kubectl get pods -n mlops-staging
        
        # Port forward and test health endpoint
        kubectl port-forward -n mlops-staging svc/churn-prediction-staging 8080:8000 &
        sleep 10
        
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
        if [ $response -eq 200 ]; then
          echo "Health check passed"
        else
          echo "Health check failed with status: $response"
          exit 1
        fi

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-production:
    needs: [deploy-staging, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name production-cluster
    
    - name: Deploy to production
      run: |
        helm upgrade --install churn-prediction ./helm/churn-prediction \
          --namespace mlops-production \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=latest \
          --set environment=production \
          --set replicaCount=5 \
          --set resources.requests.cpu=1000m \
          --set resources.requests.memory=2Gi \
          --set resources.limits.cpu=2000m \
          --set resources.limits.memory=4Gi \
          --wait --timeout=600s
    
    - name: Verify production deployment
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=churn-prediction -n mlops-production --timeout=600s
        kubectl get pods -n mlops-production
        kubectl get svc -n mlops-production
        
        echo "Production deployment completed successfully!"

  model-training:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.trigger == 'training')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Run model training
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        python scripts/train_model.py --trigger=scheduled
    
    - name: Update model in production
      if: success()
      run: |
        # Trigger model update in production
        echo "Model training completed successfully. Consider updating production model."
